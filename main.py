import asyncio
import os
from datetime import datetime, timedelta, time as dtime

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
bookings = {}  # {date: {time: {"user_id": ..., "duration": ...}}}
user_work_modes = {}  # {user_id: {date: "–û—Ñ–∏—Å" –∏–ª–∏ "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"}}
user_names = {}  # {user_id: full_name}
temp_booking = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±—Ä–æ–Ω–∏

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É")],
    [KeyboardButton(text="üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã")],
    [KeyboardButton(text="üìñ –ú–æ–∏ –±—Ä–æ–Ω–∏")],
    [KeyboardButton(text="üìã –í—Å–µ –±—Ä–æ–Ω–∏"), KeyboardButton(text="üë• –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")]
], resize_keyboard=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def ensure_user_name(message: Message):
    user_id = message.from_user.id
    if user_id not in user_names:
        user_names[user_id] = message.from_user.full_name

@dp.message(CommandStart())
async def start(message: Message):
    await ensure_user_name(message)
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# --- –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ---
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫—É")
async def start_booking(message: Message):
    await ensure_user_name(message)
    user_id = message.from_user.id
    temp_booking[user_id] = {}
    buttons = [[InlineKeyboardButton(text=(datetime.today() + timedelta(days=i)).strftime("%d.%m.%Y"),
                                     callback_data=f"date_{(datetime.today() + timedelta(days=i)).strftime('%Y-%m-%d')}")]
               for i in range(3)]  # —É–º–µ–Ω—å—à–µ–Ω–æ —Å 10 –¥–æ 3 –¥–Ω–µ–π
    await message.answer("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("date_"))
async def choose_time(callback: CallbackQuery):
    user_id = callback.from_user.id
    date = callback.data.replace("date_", "")
    temp_booking[user_id]["date"] = date

    base_dt = datetime.combine(datetime.today(), dtime(8, 30))
    times = [(base_dt + timedelta(minutes=30*i)).strftime("%H:%M") for i in range(19)]
    buttons = [[InlineKeyboardButton(text=t, callback_data=f"time_{t}")] for t in times]

    await callback.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

@dp.callback_query(F.data.startswith("time_"))
async def choose_duration(callback: CallbackQuery):
    user_id = callback.from_user.id
    time = callback.data.replace("time_", "")
    temp_booking[user_id]["time"] = time
    buttons = [
        [InlineKeyboardButton(text="30 –º–∏–Ω", callback_data="dur_30")],
        [InlineKeyboardButton(text="60 –º–∏–Ω", callback_data="dur_60")],
        [InlineKeyboardButton(text="90 –º–∏–Ω", callback_data="dur_90")]
    ]
    await callback.message.edit_text("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

@dp.callback_query(F.data.startswith("dur_"))
async def confirm_booking(callback: CallbackQuery):
    user_id = callback.from_user.id
    duration = int(callback.data.replace("dur_", ""))
    data = temp_booking.get(user_id, {})
    date = data.get("date")
    time_str = data.get("time")
    if not date or not time_str:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")

    start_dt = datetime.strptime(f"{date} {time_str}", "%Y-%m-%d %H:%M")
    end_dt = start_dt + timedelta(minutes=duration)

    bookings.setdefault(date, {})
    for t, entry in bookings[date].items():
        booked_start = datetime.strptime(f"{date} {t}", "%Y-%m-%d %H:%M")
        booked_end = booked_start + timedelta(minutes=entry['duration'])
        if booked_start < end_dt and start_dt < booked_end:
            await callback.answer("–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ!", show_alert=True)
            return await callback.message.edit_text("‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π –±—Ä–æ–Ω—å—é")

    bookings[date][time_str] = {"user_id": user_id, "duration": duration}
    await callback.message.edit_text(f"‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞: {date} –≤ {time_str} –Ω–∞ {duration} –º–∏–Ω.")
    temp_booking.pop(user_id, None)
    await callback.answer("–ì–æ—Ç–æ–≤–æ")

# --- –ú–û–ò –ë–†–û–ù–ò ---
@dp.message(F.text == "üìñ –ú–æ–∏ –±—Ä–æ–Ω–∏")
async def show_my_bookings(message: Message):
    user_id = message.from_user.id
    entries = [(d, t, info["duration"]) for d, day in bookings.items() for t, info in day.items() if info["user_id"] == user_id]
    if not entries:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
    buttons = [[InlineKeyboardButton(text=f"{d} {t} ‚Äî {dur} –º–∏–Ω", callback_data=f"cancel_{d}_{t}")] for d, t, dur in entries]
    await message.answer("üñäÔ∏è –í–∞—à–∏ –±—Ä–æ–Ω–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_booking(callback: CallbackQuery):
    _, d, t = callback.data.split("_")
    user_id = callback.from_user.id
    if bookings.get(d, {}).get(t, {}).get("user_id") == user_id:
        bookings[d].pop(t)
        await callback.message.edit_text("‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await callback.message.edit_text("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
    await callback.answer()

# --- –§–û–†–ú–ê–¢ –†–ê–ë–û–¢–´ ---
@dp.message(F.text == "üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã")
async def choose_work_days(message: Message):
    user_id = message.from_user.id
    today = datetime.today().date()
    buttons = []
    for i in range(10):  # 10 –¥–Ω–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
        d = today + timedelta(days=i)
        ds = str(d)
        current = user_work_modes.setdefault(user_id, {}).get(ds, "–û—Ñ–∏—Å")
        user_work_modes[user_id][ds] = current  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
        symbol = "üè¢" if current == "–û—Ñ–∏—Å" else "üè†"
        buttons.append([InlineKeyboardButton(text=f"{symbol} {d.strftime('%d.%m.%Y')}", callback_data=f"toggle_{ds}")])
    await message.answer("üîé –§–æ—Ä–º–∞—Ç –Ω–∞ 10 –¥–Ω–µ–π:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_format(callback: CallbackQuery):
    user_id = callback.from_user.id
    date = callback.data.replace("toggle_", "")
    current = user_work_modes.setdefault(user_id, {}).get(date, "–û—Ñ–∏—Å")
    user_work_modes[user_id][date] = "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ" if current == "–û—Ñ–∏—Å" else "–û—Ñ–∏—Å"

    today = datetime.today().date()
    buttons = []
    for i in range(10):
        d = today + timedelta(days=i)
        ds = str(d)
        status = user_work_modes[user_id].get(ds, "–û—Ñ–∏—Å")
        symbol = "üè¢" if status == "–û—Ñ–∏—Å" else "üè†"
        buttons.append([InlineKeyboardButton(text=f"{symbol} {d.strftime('%d.%m.%Y')}", callback_data=f"toggle_{ds}")])

    await callback.message.edit_text("üîé –§–æ—Ä–º–∞—Ç –Ω–∞ 10 –¥–Ω–µ–π:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

# --- –í–°–ï –ë–†–û–ù–ò ---
@dp.message(F.text == "üìã –í—Å–µ –±—Ä–æ–Ω–∏")
async def all_bookings(message: Message):
    if not bookings:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
    text = "<b>–í—Å–µ –±—Ä–æ–Ω–∏:</b>\n"
    for date in sorted(bookings):
        text += f"\n<b>{date}</b>\n"
        for time, info in sorted(bookings[date].items()):
            name = user_names.get(info["user_id"], str(info["user_id"]))
            text += f"‚Äî {time} –Ω–∞ {info['duration']} –º–∏–Ω ‚Äî {name}\n"
    await message.answer(text)

# --- –§–û–†–ú–ê–¢ –†–ê–ë–û–¢–´ –°–û–¢–†–£–î–ù–ò–ö–û–í ---
@dp.message(F.text == "üë• –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def choose_user_format(message: Message):
    if not user_work_modes:
        return await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.")
    buttons = [[InlineKeyboardButton(text=user_names[uid], callback_data=f"showfmt_{uid}")]
               for uid in user_work_modes if uid in user_names]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("showfmt_"))
async def show_user_format(callback: CallbackQuery):
    uid = int(callback.data.replace("showfmt_", ""))
    name = user_names.get(uid, str(uid))
    days = user_work_modes.get(uid, {})
    
    text = f"<b>–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {name}</b>\n"
    for date, format_type in sorted(days.items()):
        symbol = "üè¢" if format_type == "–û—Ñ–∏—Å" else "üè†"
        text += f"{symbol} {date}: {format_type}\n"
    
    await callback.message.edit_text(text)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())