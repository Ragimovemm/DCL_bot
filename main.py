import asyncio
import os
import logging
from datetime import datetime, timedelta
from typing import Set, Dict
from aiohttp import web
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery
)
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, BaseFilter
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

ADMINS = set(map(int, os.getenv("ADMINS", "").split(','))) if os.getenv("ADMINS") else set()
RESTRICTED_USERS: Set[int] = set()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_work_modes: Dict[int, Dict[str, str]] = {}
user_names: Dict[int, str] = {}
awaiting_name_input: Set[int] = set()

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—ã
user_comments: Dict[int, Dict[str, str]] = {}  # {user_id: {date_str: comment}}
awaiting_comment_input: Dict[int, str] = {}  # {user_id: date_str}

# –ù–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —ç–º–æ–¥–∑–∏
status_icons = {
    "–í—ã—Ö–æ–¥–Ω–æ–π": "üõå",
    "–û—Ç–ø—É—Å–∫": "üèùÔ∏è",
    "–û—Ñ–∏—Å": "üè¢",
    "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ": "üè†",
    "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞": "‚úàÔ∏è",
    "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π": "ü©∫"
}

class IsAdminFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMINS

class IsNotRestrictedFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id not in RESTRICTED_USERS

# –§–∏–ª—å—Ç—Ä—ã
dp.message.filter(IsNotRestrictedFilter())
router.message.filter(IsNotRestrictedFilter())

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üßë‚Äçüíº –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")],
    ]
    if user_id in ADMINS:
        buttons.extend([
            [KeyboardButton(text="üë• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥")],
            [KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")]
        ])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
def build_schedule_keyboard(user_id: int) -> InlineKeyboardMarkup:
    today = datetime.now().date()
    buttons = []
    for i in range(10):
        day = today + timedelta(days=i)
        date_str = day.isoformat()
        is_weekend = day.weekday() >= 5

        if user_id not in user_work_modes:
            user_work_modes[user_id] = {}

        status = user_work_modes[user_id].get(date_str)
        if status is None:
            status = "–í—ã—Ö–æ–¥–Ω–æ–π" if is_weekend else "–û—Ñ–∏—Å"
            user_work_modes[user_id][date_str] = status

        icon = status_icons.get(status, "üè¢")

        day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][day.weekday()]
        btn_text = f"{icon} {day.strftime('%d.%m')} ({day_name})"

        if is_weekend:
            callback_data = f"toggle_weekend_{date_str}"
        else:
            callback_data = f"toggle_{date_str}"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        comment_for_day = user_comments.get(user_id, {}).get(date_str)
        if comment_for_day:
            comment_btn = InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"delete_comment_{date_str}"
            )
        else:
            comment_btn = InlineKeyboardButton(
                text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{date_str}"
            )

        buttons.append([InlineKeyboardButton(text=btn_text, callback_data=callback_data), comment_btn])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    if user_id in RESTRICTED_USERS:
        await message.answer("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    user_names[user_id] = message.from_user.full_name

    greeting_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º —Ä–∞–±–æ—á–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "–í–æ—Ç —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:\n"
        "üõå –í—ã—Ö–æ–¥–Ω–æ–π\n"
        "üèùÔ∏è –û—Ç–ø—É—Å–∫\n"
        "üè¢ –û—Ñ–∏—Å\n"
        "üè† –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ\n"
        "‚úàÔ∏è –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞\n"
        "ü©∫ –ë–æ–ª—å–Ω–∏—á–Ω—ã–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )

    await message.answer(greeting_text, reply_markup=get_main_keyboard(user_id))

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_name_start(message: Message):
    user_id = message.from_user.id
    if user_id in RESTRICTED_USERS:
        await message.answer("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return
    awaiting_name_input.add(user_id)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")

@dp.message(lambda message: message.from_user.id in awaiting_name_input)
async def save_new_name(message: Message):
    user_id = message.from_user.id
    new_name = message.text.strip()
    if not new_name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if len(new_name) > 50:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    user_names[user_id] = new_name
    awaiting_name_input.discard(user_id)
    await message.answer(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}", reply_markup=get_main_keyboard(user_id))

@dp.message(F.text == "üßë‚Äçüíº –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message):
    user_id = message.from_user.id
    kb = build_schedule_keyboard(user_id)
    await message.answer("üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 10 –¥–Ω–µ–π:", reply_markup=kb)
    today = datetime.now().date()
    comment = user_comments.get(user_id, {}).get(today.isoformat())
    if comment:
        await message.answer(f"üí¨ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{comment}")

@dp.callback_query(lambda c: c.data.startswith("toggle_") and not c.data.startswith("toggle_weekend_"))
async def toggle_date(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        date_str = callback.data[7:]
        datetime.fromisoformat(date_str)

        current = user_work_modes.get(user_id, {}).get(date_str, "–û—Ñ–∏—Å")
        new_status = {
            "–û—Ñ–∏—Å": "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ",
            "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ": "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞",
            "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞": "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π",
            "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π": "–û—Ç–ø—É—Å–∫",
            "–û—Ç–ø—É—Å–∫": "–û—Ñ–∏—Å"
        }.get(current, "–û—Ñ–∏—Å")

        user_work_modes.setdefault(user_id, {})[date_str] = new_status

        await callback.message.edit_reply_markup(reply_markup=build_schedule_keyboard(user_id))
        await callback.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: {new_status}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("toggle_weekend_"))
async def toggle_weekend_date(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        date_str = callback.data[len("toggle_weekend_"):]
        datetime.fromisoformat(date_str)

        current = user_work_modes.get(user_id, {}).get(date_str, "–í—ã—Ö–æ–¥–Ω–æ–π")

        # –¶–∏–∫–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: –í—ã—Ö–æ–¥–Ω–æ–π -> –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ -> –û—Ç–ø—É—Å–∫ -> –í—ã—Ö–æ–¥–Ω–æ–π
        new_status = {
            "–í—ã—Ö–æ–¥–Ω–æ–π": "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞",
            "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞": "–û—Ç–ø—É—Å–∫",
            "–û—Ç–ø—É—Å–∫": "–í—ã—Ö–æ–¥–Ω–æ–π"
        }.get(current, "–í—ã—Ö–æ–¥–Ω–æ–π")

        user_work_modes.setdefault(user_id, {})[date_str] = new_status

        await callback.message.edit_reply_markup(reply_markup=build_schedule_keyboard(user_id))
        await callback.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: {new_status}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(F.text == "üë• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–≥")
async def colleagues_schedule(message: Message):
    try:
        if message.from_user.id not in ADMINS:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return

        active_users = {
            uid: name for uid, name in user_names.items()
            if uid != message.from_user.id and uid not in RESTRICTED_USERS
        }
        if not active_users:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        buttons = [
            [InlineKeyboardButton(text="üîé –í—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="select_colleague")],
            [InlineKeyboardButton(text="üìä –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="general_schedule")]
        ]
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ colleagues_schedule: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–≥")

@dp.callback_query(F.data == "select_colleague")
async def select_colleague(callback: CallbackQuery):
    try:
        active_users = {
            uid: name for uid, name in user_names.items()
            if uid != callback.from_user.id and uid not in RESTRICTED_USERS
        }
        buttons = [
            [InlineKeyboardButton(text=name, callback_data=f"colleague_{uid}")]
            for uid, name in active_users.items()
        ]
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_colleague: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)

@dp.callback_query(F.data == "general_schedule")
async def general_schedule(callback: CallbackQuery):
    try:
        active_users = {
            uid: name for uid, name in user_names.items()
            if uid != callback.from_user.id and uid not in RESTRICTED_USERS
        }
        if not active_users:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return

        today = datetime.now().date()
        dates = [today + timedelta(days=i) for i in range(10)]
        day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

        text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        for uid, name in active_users.items():
            text += f"‚Ä¢ {name}\n"
            user_comments_for_user = user_comments.get(uid, {})
            for d in dates:
                date_str = d.isoformat()
                comment = user_comments_for_user.get(date_str)
                status = user_work_modes.get(uid, {}).get(date_str)
                if status is None:
                    status = "–í—ã—Ö–æ–¥–Ω–æ–π" if d.weekday() >= 5 else "–û—Ñ–∏—Å"
                emoji = status_icons.get(status, "üè¢")
                day_name = day_names[d.weekday()]
                text += f"  - {d.strftime('%d.%m')}({day_name}): {emoji}"
                if comment:
                    text += f"  üí¨ {comment}"
                text += "\n"
            text += "\n"

        await callback.message.answer(text)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ general_schedule: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)

@dp.callback_query(F.data.startswith("colleague_"))
async def show_user_schedule(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[1])
        name = user_names.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")
        user_comments_for_user = user_comments.get(user_id, {})

        text = f"<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {name}:</b>\n\n"
        today = datetime.now().date()
        for i in range(10):
            day = today + timedelta(days=i)
            date_str = day.isoformat()
            is_weekend = day.weekday() >= 5
            if is_weekend:
                status = user_work_modes.get(user_id, {}).get(date_str, "–í—ã—Ö–æ–¥–Ω–æ–π")
            else:
                status = user_work_modes.get(user_id, {}).get(date_str, "–û—Ñ–∏—Å")
            icon = status_icons.get(status, "üè¢")
            day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][day.weekday()]
            comment = user_comments_for_user.get(date_str)
            text += f"{icon} {day.strftime('%d.%m')} ({day_name})"
            if comment:
                text += f"  üí¨ {comment}"
            text += "\n"

        await callback.message.answer(text, parse_mode=ParseMode.HTML)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_schedule: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---

@dp.callback_query(F.data.startswith("add_comment_"))
async def add_comment_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    date_str = callback.data[len("add_comment_"):]
    awaiting_comment_input[user_id] = date_str
    await callback.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ {date_str} (–±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º):")
    await callback.answer()

@dp.message(lambda m: m.from_user.id in awaiting_comment_input)
async def save_comment_handler(message: Message):
    user_id = message.from_user.id
    comment = message.text.strip()
    if not comment:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    date_str = awaiting_comment_input[user_id]
    user_comments.setdefault(user_id, {})[date_str] = comment
    del awaiting_comment_input[user_id]
    await message.answer(f"‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ {date_str} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_main_keyboard(user_id))

@dp.callback_query(F.data.startswith("delete_comment_"))
async def delete_comment_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    date_str = callback.data[len("delete_comment_"):]
    if user_id in user_comments and date_str in user_comments[user_id]:
        del user_comments[user_id][date_str]
        await callback.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω")
        await callback.message.edit_reply_markup(reply_markup=build_schedule_keyboard(user_id))
    else:
        await callback.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º ---

@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
async def access_management(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    try:
        buttons = [
            [InlineKeyboardButton(text="‚õî –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="restrict_access")],
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="allow_access")],
            [InlineKeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="make_admin")],
            [InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
        ]
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ access_management: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@dp.callback_query(F.data == "restrict_access")
async def restrict_access_handler(callback: CallbackQuery):
    try:
        available_users = [
            [InlineKeyboardButton(text=user_names.get(uid, str(uid)), callback_data=f"restrict_{uid}")]
            for uid in user_names if uid not in ADMINS and uid not in RESTRICTED_USERS
        ]
        if not available_users:
            await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", show_alert=True)
            return

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=available_users)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restrict_access_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

@dp.callback_query(F.data.startswith("restrict_"))
async def restrict_user(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[1])
        RESTRICTED_USERS.add(user_id)
        if user_id in user_comments:
            del user_comments[user_id]
        await callback.message.edit_text(
            f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_names.get(user_id, user_id)} —Ç–µ–ø–µ—Ä—å –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞"
        )
        try:
            await bot.send_message(user_id, "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restrict_user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(F.data == "allow_access")
async def allow_access_handler(callback: CallbackQuery):
    try:
        if not RESTRICTED_USERS:
            await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º", show_alert=True)
            return

        buttons = [
            [InlineKeyboardButton(text=user_names.get(uid, str(uid)), callback_data=f"allow_{uid}")]
            for uid in RESTRICTED_USERS
        ]
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ allow_access_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

@dp.callback_query(F.data.startswith("allow_"))
async def allow_user(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[1])
        if user_id in RESTRICTED_USERS:
            RESTRICTED_USERS.remove(user_id)
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_names.get(user_id, user_id)} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø"
            )
            try:
                await bot.send_message(user_id, "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            except:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", show_alert=True)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ allow_user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(F.data == "list_users")
async def list_users_handler(callback: CallbackQuery):
    try:
        user_list = []
        for uid, name in user_names.items():
            status = "üëë –ê–¥–º–∏–Ω" if uid in ADMINS else ("‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω" if uid in RESTRICTED_USERS else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
            user_list.append(f"{name} (ID: {uid}) ‚Äî {status}")

        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(user_list) if user_list else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)

@dp.callback_query(F.data == "make_admin")
async def make_admin_handler(callback: CallbackQuery):
    try:
        candidates = [
            [InlineKeyboardButton(text=user_names.get(uid, str(uid)), callback_data=f"make_admin_{uid}")]
            for uid in user_names if uid not in ADMINS
        ]

        if not candidates:
            await callback.answer("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", show_alert=True)
            return

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=candidates)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ make_admin_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

@dp.callback_query(F.data.startswith("make_admin_"))
async def make_admin(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[2])
        if user_id in ADMINS:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", show_alert=True)
            return

        ADMINS.add(user_id)
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ADMINS –Ω–∞ –¥–∏—Å–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_names.get(user_id, str(user_id))} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        try:
            await bot.send_message(user_id, "üëë –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞")
        except Exception:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ make_admin: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_handler(callback: CallbackQuery):
    try:
        candidates = [
            [InlineKeyboardButton(text=user_names.get(uid, str(uid)), callback_data=f"remove_admin_{uid}")]
            for uid in ADMINS if uid != callback.from_user.id
        ]

        if not candidates:
            await callback.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è", show_alert=True)
            return

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=candidates)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_admin_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

@dp.callback_query(F.data.startswith("remove_admin_"))
async def remove_admin(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('_')[2])
        if user_id not in ADMINS:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", show_alert=True)
            return

        ADMINS.remove(user_id)
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ADMINS –Ω–∞ –¥–∏—Å–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        await callback.message.edit_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_names.get(user_id, str(user_id))} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        try:
            await bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ —Å–Ω—è—Ç—ã")
        except Exception:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_admin: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle(request):
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def run_web():
    app = web.Application()
    app.router.add_get("/", handle)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
async def clear_comments_daily():
    while True:
        now = datetime.now()
        next_midnight = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
        seconds_until_midnight = (next_midnight - now).total_seconds()
        await asyncio.sleep(seconds_until_midnight)
        user_comments.clear()  # –æ—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–Ω—è.")

async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        run_web(),
        clear_comments_daily()
    )

if __name__ == "__main__":
    asyncio.run(main())
